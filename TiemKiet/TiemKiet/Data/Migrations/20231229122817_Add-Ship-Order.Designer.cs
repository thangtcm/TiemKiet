// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TiemKiet.Data;

#nullable disable

namespace TiemKiet.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231229122817_Add-Ship-Order")]
    partial class AddShipOrder
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TiemKiet.Data.ApplicationRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Administrator",
                            NormalizedName = "Administrator"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Staff",
                            NormalizedName = "Staff"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "TiemKietNGT",
                            NormalizedName = "TiemKietNGT"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "TiemKietPNT",
                            NormalizedName = "TiemKietPNT"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "TiemKietNB",
                            NormalizedName = "TiemKietNB"
                        });
                });

            modelBuilder.Entity("TiemKiet.Data.ApplicationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1000000000L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImgAvatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<double>("Point")
                        .HasColumnType("float");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenAPI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenNotify")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1000000001L,
                            AccessFailedCount = 0,
                            Birthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "b19f1b24-5ac9-4c8d-9b7c-5e5d5f5cfb1e",
                            Email = "admin@tiemkiet.vn",
                            EmailConfirmed = true,
                            FullName = "Admin",
                            Gender = 0,
                            LockoutEnabled = true,
                            NormalizedEmail = "admin@tiemkiet.vn",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEGjoTI1vP//MoGZ+MmaqcaQANpnEaNIA/mRu21K4RuOTb/Z536KxBT4tUEEdguWDMQ==",
                            PhoneNumber = "0923425148",
                            PhoneNumberConfirmed = true,
                            Point = 0.0,
                            Score = 0.0,
                            SecurityStamp = "ZD5UZJQK6Q5W6N7O6RBRF6DB2Q2G2AIJ",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("TiemKiet.Data.ApplicationUserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1000000001L,
                            RoleId = 1L
                        });
                });

            modelBuilder.Entity("TiemKiet.Models.ApplicationUserToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationUserToken");
                });

            modelBuilder.Entity("TiemKiet.Models.BlogPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateRemove")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeatheredImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserIdCreate")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserIdRemove")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserIdUpdate")
                        .HasColumnType("bigint");

                    b.Property<bool>("Visible")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserIdCreate");

                    b.HasIndex("UserIdRemove");

                    b.HasIndex("UserIdUpdate");

                    b.ToTable("BlogPosts");
                });

            modelBuilder.Entity("TiemKiet.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRemove")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("UrlGoogleMap")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserIdCreate")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserIdRemove")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserIdUpdate")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("UserIdCreate");

                    b.HasIndex("UserIdRemove");

                    b.HasIndex("UserIdUpdate");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("TiemKiet.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRemove")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<long?>("UserIdCreate")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserIdRemove")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserIdUpdate")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserIdCreate");

                    b.HasIndex("UserIdRemove");

                    b.HasIndex("UserIdUpdate");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("TiemKiet.Models.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRemove")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DistrictName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<long?>("UserIdCreate")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserIdRemove")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserIdUpdate")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("UserIdCreate");

                    b.HasIndex("UserIdRemove");

                    b.HasIndex("UserIdUpdate");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("TiemKiet.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<long>("ApplicationUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateFeedback")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("TiemKiet.Models.ImageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<int?>("FeedbackId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishUpload")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserIdUpload")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("UserIdUpload");

                    b.ToTable("ImageModel");
                });

            modelBuilder.Entity("TiemKiet.Models.ManagerVoucherLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateTimeGives")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReponseGive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserIdClaim")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserIdGive")
                        .HasColumnType("bigint");

                    b.Property<int?>("VoucherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserIdClaim");

                    b.HasIndex("UserIdGive");

                    b.HasIndex("VoucherId");

                    b.ToTable("ManagerVoucherLogs");
                });

            modelBuilder.Entity("TiemKiet.Models.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatePreparing")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<double>("DiscountEvent")
                        .HasColumnType("float");

                    b.Property<double>("DiscountRank")
                        .HasColumnType("float");

                    b.Property<double>("DiscountShip")
                        .HasColumnType("float");

                    b.Property<double>("Distance")
                        .HasColumnType("float");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("GrandTotal")
                        .HasColumnType("float");

                    b.Property<double>("LatCustomer")
                        .HasColumnType("float");

                    b.Property<string>("ListVoucher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("LongCustomer")
                        .HasColumnType("float");

                    b.Property<string>("NoteShip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ShipTotal")
                        .HasColumnType("float");

                    b.Property<long?>("StaffId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("TiemKiet.Models.OrderDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("AddIce")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<bool>("UpSize")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("TiemKiet.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRemove")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductMBDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ProductPrice")
                        .HasColumnType("float");

                    b.Property<double>("ProductPriceUp")
                        .HasColumnType("float");

                    b.Property<double>("ProductSale")
                        .HasColumnType("float");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.Property<long?>("UserIdCreate")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserIdRemove")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserIdUpdate")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("UserIdCreate");

                    b.HasIndex("UserIdRemove");

                    b.HasIndex("UserIdUpdate");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("TiemKiet.Models.ProductHome", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DatePublish")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<long>("UserUpdateId")
                        .HasColumnType("bigint");

                    b.Property<int>("productHomeType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserUpdateId");

                    b.ToTable("ProductHome");
                });

            modelBuilder.Entity("TiemKiet.Models.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityNameShort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRemove")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<long?>("UserIdCreate")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserIdRemove")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserIdUpdate")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserIdCreate");

                    b.HasIndex("UserIdRemove");

                    b.HasIndex("UserIdUpdate");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("TiemKiet.Models.TransactionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateTimePayment")
                        .HasColumnType("datetime2");

                    b.Property<double>("DiscountPrice")
                        .HasColumnType("float");

                    b.Property<double>("PointNew")
                        .HasColumnType("float");

                    b.Property<double>("PointOld")
                        .HasColumnType("float");

                    b.Property<double>("ScroreNew")
                        .HasColumnType("float");

                    b.Property<double>("ScroreOld")
                        .HasColumnType("float");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<long?>("UserIdCustomer")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserIdStaff")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserIdCustomer");

                    b.HasIndex("UserIdStaff");

                    b.ToTable("TransactionLog");
                });

            modelBuilder.Entity("TiemKiet.Models.VersionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeploy")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMaintenance")
                        .HasColumnType("bit");

                    b.Property<string>("UrlAndroidVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlIOSVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VersionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VersionModel");
                });

            modelBuilder.Entity("TiemKiet.Models.Voucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<double>("DiscountValue")
                        .HasColumnType("float");

                    b.Property<int>("ExpiryDays")
                        .HasColumnType("int");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<double>("MaxDiscountAmount")
                        .HasColumnType("float");

                    b.Property<double>("MinBillAmount")
                        .HasColumnType("float");

                    b.Property<long?>("UserIdUpdate")
                        .HasColumnType("bigint");

                    b.Property<string>("VoucherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VoucherType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserIdUpdate");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("TiemKiet.Models.VoucherUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RedeemedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UserIdClaim")
                        .HasColumnType("bigint");

                    b.Property<int?>("VoucherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserIdClaim");

                    b.HasIndex("VoucherId");

                    b.ToTable("VoucherUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("TiemKiet.Data.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("TiemKiet.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("TiemKiet.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("TiemKiet.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TiemKiet.Data.ApplicationUserRole", b =>
                {
                    b.HasOne("TiemKiet.Data.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TiemKiet.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TiemKiet.Models.ApplicationUserToken", b =>
                {
                    b.HasOne("TiemKiet.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("TiemKiet.Models.BlogPost", b =>
                {
                    b.HasOne("TiemKiet.Data.ApplicationUser", "UserCreate")
                        .WithMany()
                        .HasForeignKey("UserIdCreate");

                    b.HasOne("TiemKiet.Data.ApplicationUser", "UserRemove")
                        .WithMany()
                        .HasForeignKey("UserIdRemove");

                    b.HasOne("TiemKiet.Data.ApplicationUser", "UserUpdate")
                        .WithMany()
                        .HasForeignKey("UserIdUpdate");

                    b.Navigation("UserCreate");

                    b.Navigation("UserRemove");

                    b.Navigation("UserUpdate");
                });

            modelBuilder.Entity("TiemKiet.Models.Branch", b =>
                {
                    b.HasOne("TiemKiet.Models.District", "District")
                        .WithMany("Branches")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TiemKiet.Data.ApplicationUser", "UserCreate")
                        .WithMany()
                        .HasForeignKey("UserIdCreate");

                    b.HasOne("TiemKiet.Data.ApplicationUser", "UserRemove")
                        .WithMany()
                        .HasForeignKey("UserIdRemove");

                    b.HasOne("TiemKiet.Data.ApplicationUser", "UserUpdate")
                        .WithMany()
                        .HasForeignKey("UserIdUpdate");

                    b.Navigation("District");

                    b.Navigation("UserCreate");

                    b.Navigation("UserRemove");

                    b.Navigation("UserUpdate");
                });

            modelBuilder.Entity("TiemKiet.Models.Country", b =>
                {
                    b.HasOne("TiemKiet.Data.ApplicationUser", "UserCreate")
                        .WithMany()
                        .HasForeignKey("UserIdCreate");

                    b.HasOne("TiemKiet.Data.ApplicationUser", "UserRemove")
                        .WithMany()
                        .HasForeignKey("UserIdRemove");

                    b.HasOne("TiemKiet.Data.ApplicationUser", "UserUpdate")
                        .WithMany()
                        .HasForeignKey("UserIdUpdate");

                    b.Navigation("UserCreate");

                    b.Navigation("UserRemove");

                    b.Navigation("UserUpdate");
                });

            modelBuilder.Entity("TiemKiet.Models.District", b =>
                {
                    b.HasOne("TiemKiet.Models.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TiemKiet.Data.ApplicationUser", "UserCreate")
                        .WithMany()
                        .HasForeignKey("UserIdCreate");

                    b.HasOne("TiemKiet.Data.ApplicationUser", "UserRemove")
                        .WithMany()
                        .HasForeignKey("UserIdRemove");

                    b.HasOne("TiemKiet.Data.ApplicationUser", "UserUpdate")
                        .WithMany()
                        .HasForeignKey("UserIdUpdate");

                    b.Navigation("Province");

                    b.Navigation("UserCreate");

                    b.Navigation("UserRemove");

                    b.Navigation("UserUpdate");
                });

            modelBuilder.Entity("TiemKiet.Models.Feedback", b =>
                {
                    b.HasOne("TiemKiet.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("TiemKiet.Models.ImageModel", b =>
                {
                    b.HasOne("TiemKiet.Models.Branch", null)
                        .WithMany("Imagelist")
                        .HasForeignKey("BranchId");

                    b.HasOne("TiemKiet.Models.Feedback", null)
                        .WithMany("ImageLst")
                        .HasForeignKey("FeedbackId");

                    b.HasOne("TiemKiet.Data.ApplicationUser", "UserUpload")
                        .WithMany()
                        .HasForeignKey("UserIdUpload")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserUpload");
                });

            modelBuilder.Entity("TiemKiet.Models.ManagerVoucherLog", b =>
                {
                    b.HasOne("TiemKiet.Data.ApplicationUser", "UserClaim")
                        .WithMany()
                        .HasForeignKey("UserIdClaim");

                    b.HasOne("TiemKiet.Data.ApplicationUser", "UserGive")
                        .WithMany()
                        .HasForeignKey("UserIdGive");

                    b.HasOne("TiemKiet.Models.Voucher", "Voucher")
                        .WithMany()
                        .HasForeignKey("VoucherId");

                    b.Navigation("UserClaim");

                    b.Navigation("UserGive");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("TiemKiet.Models.Order", b =>
                {
                    b.HasOne("TiemKiet.Data.ApplicationUser", "StaffUser")
                        .WithMany()
                        .HasForeignKey("StaffId");

                    b.HasOne("TiemKiet.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("StaffUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TiemKiet.Models.OrderDetail", b =>
                {
                    b.HasOne("TiemKiet.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId");

                    b.HasOne("TiemKiet.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TiemKiet.Models.Product", b =>
                {
                    b.HasOne("TiemKiet.Models.Branch", "Branch")
                        .WithMany("Products")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TiemKiet.Data.ApplicationUser", "UserCreate")
                        .WithMany()
                        .HasForeignKey("UserIdCreate");

                    b.HasOne("TiemKiet.Data.ApplicationUser", "UserRemove")
                        .WithMany()
                        .HasForeignKey("UserIdRemove");

                    b.HasOne("TiemKiet.Data.ApplicationUser", "UserUpdate")
                        .WithMany()
                        .HasForeignKey("UserIdUpdate");

                    b.Navigation("Branch");

                    b.Navigation("UserCreate");

                    b.Navigation("UserRemove");

                    b.Navigation("UserUpdate");
                });

            modelBuilder.Entity("TiemKiet.Models.ProductHome", b =>
                {
                    b.HasOne("TiemKiet.Data.ApplicationUser", "UserUpdate")
                        .WithMany()
                        .HasForeignKey("UserUpdateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserUpdate");
                });

            modelBuilder.Entity("TiemKiet.Models.Province", b =>
                {
                    b.HasOne("TiemKiet.Models.Country", "Country")
                        .WithMany("Provinces")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TiemKiet.Data.ApplicationUser", "UserCreate")
                        .WithMany()
                        .HasForeignKey("UserIdCreate");

                    b.HasOne("TiemKiet.Data.ApplicationUser", "UserRemove")
                        .WithMany()
                        .HasForeignKey("UserIdRemove");

                    b.HasOne("TiemKiet.Data.ApplicationUser", "UserUpdate")
                        .WithMany()
                        .HasForeignKey("UserIdUpdate");

                    b.Navigation("Country");

                    b.Navigation("UserCreate");

                    b.Navigation("UserRemove");

                    b.Navigation("UserUpdate");
                });

            modelBuilder.Entity("TiemKiet.Models.TransactionLog", b =>
                {
                    b.HasOne("TiemKiet.Data.ApplicationUser", "UserCustomer")
                        .WithMany()
                        .HasForeignKey("UserIdCustomer");

                    b.HasOne("TiemKiet.Data.ApplicationUser", "UserStaff")
                        .WithMany()
                        .HasForeignKey("UserIdStaff");

                    b.Navigation("UserCustomer");

                    b.Navigation("UserStaff");
                });

            modelBuilder.Entity("TiemKiet.Models.Voucher", b =>
                {
                    b.HasOne("TiemKiet.Data.ApplicationUser", "UserUpdate")
                        .WithMany()
                        .HasForeignKey("UserIdUpdate");

                    b.Navigation("UserUpdate");
                });

            modelBuilder.Entity("TiemKiet.Models.VoucherUser", b =>
                {
                    b.HasOne("TiemKiet.Data.ApplicationUser", "UserClaim")
                        .WithMany()
                        .HasForeignKey("UserIdClaim");

                    b.HasOne("TiemKiet.Models.Voucher", "Voucher")
                        .WithMany()
                        .HasForeignKey("VoucherId");

                    b.Navigation("UserClaim");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("TiemKiet.Models.Branch", b =>
                {
                    b.Navigation("Imagelist");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("TiemKiet.Models.Country", b =>
                {
                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("TiemKiet.Models.District", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("TiemKiet.Models.Feedback", b =>
                {
                    b.Navigation("ImageLst");
                });

            modelBuilder.Entity("TiemKiet.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("TiemKiet.Models.Province", b =>
                {
                    b.Navigation("Districts");
                });
#pragma warning restore 612, 618
        }
    }
}
